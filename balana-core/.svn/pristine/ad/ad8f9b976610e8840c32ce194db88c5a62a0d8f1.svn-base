/**
 * 
 */
package conflictanalyzer.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.wso2.balana.Rule;

import conflictanalyzer.logic.ConflictingRulesPair;
import conflictanalyzer.logic.ConflictsCollection;
import conflictanalyzer.logic.PolicyConflictAnalyzer;

/**
 * @author Guido Marilli
 * GUI for conflict analysis.
 */
public class ConflictAnalyzerGUI extends JFrame {
	private static final int width = 820;
	private static final int height = 630;
	
	private static final Object conflictsTableLabels[] = { "1st policy", "Conflicting rule", "2nd policy", "Conflicting rule", "Decision"};
	
	private PolicyConflictAnalyzer conflictAnalyzer;
	private List<ConflictingRulesPair> conflicts;
	
	private JButton selectPolicySourceButton;
	private JTextField pathTextField;
	private JTextField policiesBaseNameTextField;
	private JButton runButton;
	private JButton saveButton;
	private TableModel conflictsTableModel;
	private JTable conflictsTable;
	private JTextArea statisticsTextArea;
	private File policiesDirectory;
	
	private static final long serialVersionUID = 6523267782524837903L;

	/**
	 * @param title
	 * @throws HeadlessException
	 */
	public ConflictAnalyzerGUI(String title, int width, int height) throws HeadlessException {
		super(title);
		conflictAnalyzer = null;
		conflicts = null;
		setLayout(new BorderLayout());
		//BoxLayout mainLayout = new BoxLayout(this, BoxLayout.Y_AXIS);
		//GridLayout mainLayout = new GridLayout(2, 1);
		//BorderLayout mainLayout = new BorderLayout();
		//setLayout(mainLayout);
		setSize(width, height);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel panel1 = new JPanel();
		panel1.setLayout(new FlowLayout(FlowLayout.CENTER));
		JPanel panel2 = new JPanel();
		//panel2.setBackground(new Color(34, 33, 60));
		//setLayout(mainLayout);
		//setLayout(new FlowLayout());
		
		// PATH button
		selectPolicySourceButton = new JButton("Policies path");
		selectPolicySourceButton.setMnemonic('P');
		selectPolicySourceButton.setToolTipText("Select the folder in which the policies"
				+ " are stored");
		selectPolicySourceButton.setSize(150, 30);
		selectPolicySourceButton.addActionListener(new FileChooserListener());
		
		// PATH text field
		pathTextField = new JTextField("");
		pathTextField.setColumns(30);
		pathTextField.setEditable(false);
		
		// POLICIES BASE NAME text field
		policiesBaseNameTextField = new JTextField("<policies base name>", 15);
		policiesBaseNameTextField.setToolTipText("The prefix of policy file names");
		
		// RUN button
		runButton = new JButton("Run");
		runButton.setMnemonic('R');
		runButton.setToolTipText("Run a new conflict analysis");
		runButton.setSize(150, 30);
		runButton.addActionListener(new RunListener());
		
		// SAVE button
		/*saveButton = new JButton("Save");
		saveButton.setMnemonic('S');
		saveButton.setToolTipText("Save the results");
		saveButton.setSize(150, 30);
		saveButton.addActionListener(new SaveListener());*/
		
		// TABLES to show analysis results
		conflictsTableModel = new DefaultTableModel(null, conflictsTableLabels);
		conflictsTable = new JTable(conflictsTableModel);
		conflictsTable.setEnabled(false);
		
		// Text area for showing statistics
		statisticsTextArea = new JTextArea();
		
		// SCROLL PANES for conflicts and statistics
		JScrollPane conflictsScrollPane = new JScrollPane(conflictsTable);
		conflictsScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		JScrollPane statisticsScrollPane = new JScrollPane(statisticsTextArea);
		statisticsScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		
		String[] tabLabels = {"Conflicts", "Statistics"};
		JTabbedPane tabs = new JTabbedPane();
		tabs.addTab(tabLabels[0], conflictsScrollPane);
		tabs.addTab(tabLabels[1], statisticsScrollPane);
		//add(tabs);
		
		panel1.add(selectPolicySourceButton);
		panel1.add(pathTextField);
		panel1.add(policiesBaseNameTextField);
		panel1.add(runButton);
		//panel1.add(saveButton);
		
		panel2.add(tabs);
		
		// Add the panel to the frame
		add(panel1, BorderLayout.NORTH);
		add(panel2, BorderLayout.CENTER);
		//add(panel1, 0, 0);
		//add(panel2, 0, 1);
		//add(panel1);
		//add(panel2);
	}
	
	public static void main(String[] args) {
		ConflictAnalyzerGUI gui = new ConflictAnalyzerGUI("Conflict Analyzer", width, height);
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		int x = (screenSize.width - width)/2;
		int y = (screenSize.height - height)/2;
		gui.setLocation(x, y);		// Set the GUI at exact center of the screen
		gui.setVisible(true);
	}
	
	private class FileChooserListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			try {
				String userDir = System.getProperty("user.home");
				JFileChooser fileChooser = new JFileChooser(userDir +"/Desktop");
				fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				//fileChooser.setFileFilter(new TxtFileFilter());
				int n = fileChooser.showOpenDialog(ConflictAnalyzerGUI.this);
				if (n == JFileChooser.APPROVE_OPTION) {
					/*File f = fileChooser.getSelectedFile();
					BufferedReader read = new BufferedReader(new FileReader(f));
					String line = read.readLine();
					while(line != null) {
						pathTextField.setText(line);
						line = read.readLine();
					}
					read.close();*/
					//policiesDirectory = fileChooser.getCurrentDirectory();
					String path = fileChooser.getSelectedFile().getPath();
					policiesDirectory = new File(path);
					pathTextField.setText(path);
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}
	
	private class RunListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			DefaultTableModel conflictsTableModel = (DefaultTableModel) conflictsTable.getModel();
			
			// Delete previous content from conflicts table
			conflictsTableModel.setRowCount(0);
			
			// Starting dialog
			JOptionPane runOption = new JOptionPane("Analyzing the policies, it may take some "
					+ "minutes...", JOptionPane.INFORMATION_MESSAGE, JOptionPane.PLAIN_MESSAGE);
			JDialog analysisStarted = runOption.createDialog(ConflictAnalyzerGUI.this, "Info");
			//analysisStarted.setSize(390, 120);
			analysisStarted.pack();
			analysisStarted.setVisible(true);
			
			// Analysis
			conflictAnalyzer = new PolicyConflictAnalyzer(policiesDirectory.getAbsolutePath(), 
							policiesBaseNameTextField.getText());
			conflicts = conflictAnalyzer.getConflicts();
			
			Rule firstRule = null;
			Rule secondRule = null;
			String firstPolicyId = null;
			String firstRuleId = null;
			String secondPolicyId = null;
			String secondRuleId = null;
			String decision = null;
			
			// Add results to the conflicts table
			for(ConflictingRulesPair conflict: conflicts) {
				firstRule = conflict.getFirstRule();
				secondRule = conflict.getSecondRule();
				firstPolicyId = firstRule.getPolicy().getId().toString();
				firstRuleId = firstRule.getId().toString();
				secondPolicyId = secondRule.getPolicy().getId().toString();
				secondRuleId = secondRule.getId().toString();
				decision = conflict.getWinningDecisionStringFormat();
				Object[] row = new Object[]{firstPolicyId, firstRuleId, secondPolicyId, 
						secondRuleId, decision};
				conflictsTableModel.addRow(row);
			}
			
			// Write statistics results
			ConflictsCollection conflictsCollection = new ConflictsCollection(conflicts);
			String statistics = "Conflicts detected: " + conflictsCollection.getConflicts().size() 
					+ "\n" + conflictsCollection.getStatisticalInfoColumnized();
			statisticsTextArea.setText(statistics);
			
			// Analysis completed dialog
			JOptionPane analysisCompletedOption = new JOptionPane("Analysis completed", 
					JOptionPane.INFORMATION_MESSAGE, JOptionPane.PLAIN_MESSAGE);
			JDialog analysisCompleted = analysisCompletedOption.createDialog(
					ConflictAnalyzerGUI.this, "Info");
			//analysisCompleted.setSize(250, 120);
			analysisCompleted.pack();
			analysisCompleted.setVisible(true);
		}
	}
	
	/**
	 * @author Guido
	 * Listener class for SAVE button.
	 */
	private class SaveListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			if(conflicts != null) {
				// Print conflicts on a file
				/*List<String> lines = new ArrayList<String>();
				for(ConflictingRulesPair conflictingRulesPair : conflicts)
					lines.add(conflictingRulesPair.getCompactRepresentationWithWinningRule());
				Path file = Paths.get(
						System.getProperty("user.home"),"Desktop","sample-policies","sample-xacml3",
						"continue-a-xacml3-policies","Conflicts.txt");
				try {
					Files.write(file, lines, Charset.forName("UTF-8"));
				} catch (IOException e) {
					e.printStackTrace();
				}*/
			}
		}
	}

}
