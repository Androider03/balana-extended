/**
 * 
 */
package conflictanalyzer.logic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.wso2.balana.AbstractPolicy;
import org.wso2.balana.Rule;

/**
 * @author Guido Marilli
 *
 */
public class ConflictsCollection {
	
	/**
	 * A list of conflicting rules pairs.
	 */
	private List<ConflictingRulesPair> conflicts;
	
	/**
	 * All the rules that are involved in conflicts.
	 */
	private List<Rule> rulesInvolved;

	/**
	 * @param conflicts
	 */
	public ConflictsCollection(List<ConflictingRulesPair> conflicts) {
		this.conflicts = conflicts;
		Set<Rule> allRulesInvolved = new HashSet<Rule>();
		for (ConflictingRulesPair conflictingRulesPair : conflicts) {
			allRulesInvolved.add(conflictingRulesPair.getFirstRule());
			allRulesInvolved.add(conflictingRulesPair.getSecondRule());
		}
		rulesInvolved = new ArrayList<Rule>(allRulesInvolved);
	}

	/**
	 * @return the conflicts
	 */
	public List<ConflictingRulesPair> getConflicts() {
		return conflicts;
	}
	
	/**
	 * @return the policies involved in the conflicts
	 */
	public Set<AbstractPolicy> getPoliciesInvolved() {
		Set<AbstractPolicy> result = new HashSet<AbstractPolicy>();
		for (Rule rule : rulesInvolved)
			result.add(rule.getPolicy());
		return result;
	}
	
	/**
	 * @return the <code>Rule</code>s that are involved in the most number of conflicts
	 */
	public List<Rule> getMostConflictingRules() {
		ArrayList<Integer> occurrencies = getRulesFrenquencies();
		int max = Collections.max(occurrencies);
		
		List<Integer> indexes = new ArrayList<Integer>();
		for(int i = 0; i < occurrencies.size(); i++)
			if(occurrencies.get(i) == max)
				indexes.add(i);
		
		List<Rule> result = new ArrayList<Rule>();
		for(int i = 0; i < indexes.size(); i++)
			result.add(rulesInvolved.get(indexes.get(i)));
		
		return result;
	}
	
	/**
	 * @return the policies that are involved in the most number of conflicts
	 */
	public List<AbstractPolicy> getMostConflictingPolicies() {
		ArrayList<Integer> occurrencies = getPoliciesFrenquencies();
		int max = Collections.max(occurrencies);
		
		Set<AbstractPolicy> policies = new HashSet<AbstractPolicy>();
		for(Rule rule : rulesInvolved)
			policies.add(rule.getPolicy());
		List<AbstractPolicy> policiesList = new ArrayList<AbstractPolicy>(policies);
		
		List<Integer> indexes = new ArrayList<Integer>();
		for(int i = 0; i < occurrencies.size(); i++)
			if(occurrencies.get(i) == max)
				indexes.add(i);
		
		List<AbstractPolicy> result = new ArrayList<AbstractPolicy>();
		for(int i = 0; i < indexes.size(); i++)
			result.add(policiesList.get(indexes.get(i)));
		
		return result;
	}
	
	/**
	 * @return the average number of conflicts per policy
	 */
	public float getAverageConflictsPerPolicy() {
		return average(getPoliciesFrenquencies());
	}
	
	/**
	 * @return the average number of conflicts per rule
	 */
	public float getAverageConflictsPerRule() {
		return average(getRulesFrenquencies());
	}
	
	/**
	 * @return the number of conflicts in which each policy is involved
	 */
	private ArrayList<Integer> getPoliciesFrenquencies() {
		List<AbstractPolicy> allPoliciesOccurrencies = new ArrayList<AbstractPolicy>();
		for (ConflictingRulesPair conflictingRulesPair : conflicts) {
			allPoliciesOccurrencies.add(conflictingRulesPair.getFirstRule().getPolicy());
			allPoliciesOccurrencies.add(conflictingRulesPair.getSecondRule().getPolicy());
		}
		
		Set<AbstractPolicy> policies = new HashSet<AbstractPolicy>();
		for(Rule rule : rulesInvolved)
			policies.add(rule.getPolicy());
		List<AbstractPolicy> policiesList = new ArrayList<AbstractPolicy>(policies);
		
		ArrayList<Integer> occurrencies = new ArrayList<Integer>();
		for(int i = 0; i < policiesList.size(); i++)
			occurrencies.add(Collections.frequency(allPoliciesOccurrencies, policiesList.get(i)));
		return occurrencies;
	}
	
	/**
	 * @return the number of rules in which each policy is involved
	 */
	private ArrayList<Integer> getRulesFrenquencies() {
		List<Rule> allRulesOccurrencies = new ArrayList<Rule>();
		for (ConflictingRulesPair conflictingRulesPair : conflicts) {
			allRulesOccurrencies.add(conflictingRulesPair.getFirstRule());
			allRulesOccurrencies.add(conflictingRulesPair.getSecondRule());
		}

		List<Rule> rules = new ArrayList<Rule>(rulesInvolved);

		ArrayList<Integer> occurrencies = new ArrayList<Integer>();
		for(int i = 0; i < rules.size(); i++)
			occurrencies.add(Collections.frequency(allRulesOccurrencies, rules.get(i)));
		return occurrencies;
	}
	
	/**
	 * @param values
	 * @return the average of the specified values
	 */
	private float average(List<Integer> values) {
		int sum = 0;
		for(int i = 0; i < values.size(); i++)
			sum += values.get(i);
		return sum/values.size();
	}
	
}
